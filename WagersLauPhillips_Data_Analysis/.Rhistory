data=doi[unstressModel(adverb.fm0)[[1]], ])
summary(adverb.fm0)
summary(adverb.fm1)
with(doi[unstressModel(adverb.fm0)[[1]], ],
interaction.plot(Grammaticality, SubjectNumber, RT),
ylim=c(400,525))
woi <- 5
doi <- subset(exp1.target, Region==woi)
unstressModel <- function(fm){
resid(fm) %>%
scale %>%
abs -> scaled_residuals
keep.these.obs <- which(scaled_residuals < 3)
stressors <- which(scaled_residuals >=3)
return(list(keep.these.obs, stressors))
}
exp1.formula <- as.formula("RT ~ SubjectNumber*Grammaticality + (SubjectNumber*Grammaticality|Subj) + (SubjectNumber*Grammaticality|Item)")
verb.fm0 <- lmer(exp1.formula, data=doi)
verb.fm1 <- update(verb.fm0,
data=doi[unstressModel(verb.fm0)[[1]], ])
summary(verb.fm0)
summary(verb.fm1)
with(doi[unstressModel(verb.fm0)[[1]], ],
interaction.plot(SubjectNumber, Grammaticality, RT),
ylim=c(400,525))
#par(mfcol=c(1,1), mar=c(4,4,3,3))
#qqnorm(resid(verb.fm0))
#qqnorm(resid(verb.fm1))
relabelExperiment1(Experiment1) %$%
table(QPCT, Grammaticality, SubjectNumber)
relabelExperiment1(Experiment1) %$%
table(QPCT, Grammaticality, SubjectNumber) %>%
prop.table(c(2,3))
relabelExperiment1(Experiment1) %$%
table(QPCT, Grammaticality, SubjectNumber) %>%
prop.table(c(2,3)) %>%
round(2) -> exp1_accuracy.table
exp1_accuracy.table
print(100*exp1_accuracy.table['100',], digits=2)
print(100*exp1_accuracy.table['100',,], digits=2)
?xtable
??xtable
library(xtable)
install.packages(xtable)
install.packages("xtable")
?lable
?kable
kable(region_means.table, format="pandoc")
library(knitr)
kable(region_means.table, format="pandoc")
kable(region_means.table[,,'sg'], format="pandoc")
kable(region_means.table[,,'sg'], format="pandoc")
ftable(region_means.table)
ftable(region_means.table) %>% kable
ftable(region_means.table)
kable(region_means.table[,,'sg'], format="pandoc")
?kable
kable(region_means.table[,,'sg'])
stderr <- function(x){ sd(x, na.rm=TRUE) / sqrt(length(x[!is.na(x)])) }
exp1.target %$%
tapply(RT, list(Grammaticality, Region, SubjectNumber), mean) ->
region_means.table
exp1.target %$%
tapply(RT, list(Grammaticality, Region, SubjectNumber), stderr) ->
region_se.table
kable(region_means.table[,,'sg'])
relabelExperiment1(Experiment1) %$%
table(QPCT, Grammaticality, SubjectNumber) %>%
prop.table(c(2,3)) -> exp1_accuracy.table
options(digits=2)
kable(100*exp1_accuracy.table['100',,])
relabelExperiment1(Experiment1) %$%
table(QPCT, Grammaticality, SubjectNumber) %>%
prop.table(c(2,3)) -> exp1_accuracy.table
options(digits=3)
kable(100*exp1_accuracy.table['100',,])
# Load all data
load("WagersLauPhillips.rawdata.Rdata")
# Libraries
library(magrittr)
library(lme4)
library(gplots)
library(knitr)
options(digits=2)
?kable
exp1.target %$%
tapply(RT, list(Grammaticality, Region, SubjectNumber), mean) ->
region_means.table
exp1.target %$%
tapply(RT, list(Grammaticality, Region, SubjectNumber, Subj), means) -> regionxsubj_means.table
apply(regionxsubj_means.table, c(1,2,3), stderr) -> region_se.table
exp1.target %$%
tapply(RT, list(Grammaticality, Region, SubjectNumber), mean) ->
region_means.table
exp1.target %$%
tapply(RT, list(Grammaticality, Region, SubjectNumber, Subj), mean) -> regionxsubj_means.table
apply(regionxsubj_means.table, c(1,2,3), stderr) -> region_se.table
region_se.table
exp1.target %$%
tapply(RT, list(Grammaticality, Region, SubjectNumber), mean) ->
region_means.table
# Use participant-wise standard errors
exp1.target %$%
tapply(RT, list(Grammaticality, Region, SubjectNumber, Subj), mean) -> regionxsubj_means.table
apply(regionxsubj_means.table, c(1,2,3), stderr) -> region_se.table
table(exp1.target$Region)
plot(table(exp1.target$Region))
range.x <- 1:14
kable(region_means.table[range.x,,'sg'], caption="Singular subjects")
kable(region_means.table[range.x,,'pl'], caption="Plural subjects")
range.x <- 1:14
kable(region_means.table[,range.x,'sg'], caption="Singular subjects")
kable(region_means.table[,range.x,'pl'], caption="Plural subjects")
glm(QPCT ~ Grammaticality*SubjectNumber, data=Experiment1)
glm(QPCT ~ Grammaticality*SubjectNumber, data=Experiment1)
relabelExperiment1(Experiment1) -> Experiment1
glm(QPCT ~ Grammaticality*SubjectNumber, data=Experiment1)
glm(QPCT ~ Grammaticality*SubjectNumber, data=subset(Experiment1, Region==1))
summary(glm(QPCT ~ Grammaticality*SubjectNumber, data=subset(Experiment1, Region==1)))
summary(glm(QPCT ~ Grammaticality*SubjectNumber, family=binomial, data=subset(Experiment1, Region==1)))
summary(glm(I(QPCT==100) ~ Grammaticality*SubjectNumber, family=binomial, data=subset(Experiment1, Region==1)))
glmer(QPCT ~ Grammaticality*SubjectNumber + (QPCT|Grammaticality*SubjectNumber ),
data = subset(Experiment1, Region==1))
glmer(QPCT ~ Grammaticality*SubjectNumber + (QPCT|Grammaticality*SubjectNumber ),
data = subset(Experiment1, Region==1))
glmer(QPCT ~ Grammaticality*SubjectNumber + (Grammaticality*SubjectNumber|Subj),
data = subset(Experiment1, Region==1))
glmer(QPCT ~ Grammaticality*SubjectNumber + (Grammaticality*SubjectNumber|Subj),
data = subset(Experiment1, Region==1), family=binomial)
lmer(QPCT ~ Grammaticality*SubjectNumber + (Grammaticality*SubjectNumber|Subj),
data = subset(Experiment1, Region==1), family=binomial)
glmer(I(QPCT==100) ~ Grammaticality*SubjectNumber + (Grammaticality*SubjectNumber|Subj),
data = subset(Experiment1, Region==1))
lmer(I(QPCT==100) ~ Grammaticality*SubjectNumber + (Grammaticality*SubjectNumber|Subj),
data = subset(Experiment1, Region==1))
glmer(I(QPCT=='100') ~ Grammaticality*SubjectNumber + (Grammaticality*SubjectNumber|Subj),
data = subset(Experiment1, Region==1))
Experiment1$QPCT
relabelExperiment1(Experiment1) -> Experiment1
table(QPCT, Grammaticality, SubjectNumber) %>%
prop.table(c(2,3)) -> exp1_accuracy.table
kable(100*exp1_accuracy.table['100',,], caption="Experiment 1 Accuracy by Condition")
Experiment1$QPCT <- Experiment1$QPCT/100
glmer(QPCT ~ Grammaticality*SubjectNumber + (Grammaticality*SubjectNumber|Subj),
data = subset(Experiment1, Region==1))
Experiment1 %$%
tapply(QPCT, list(Grammaticality, SubjectNumber), mean) ->
exp1_accuracy.table
exp1_accuracy.table
?kable
Experiment1 %$%
tapply(QPCT, list(Grammaticality, SubjectNumber), mean) ->
exp1_accuracy.table
kable(100*exp1_accuracy.table, caption="Experiment 1 Accuracy by Condition", format="html")
glmer(QPCT ~ Grammaticality*SubjectNumber + (Grammaticality*SubjectNumber|Subj),
data = subset(Experiment1, Region==1))
glmer(QPCT ~ Grammaticality*SubjectNumber + (Grammaticality*SubjectNumber|Subj),
data = subset(Experiment1, Region==1))
Experiment1$QPCT
glmer(QPCT ~ Grammaticality*SubjectNumber + (Grammaticality*SubjectNumber|Subj),
data = subset(Experiment1, Region==1))
summary(glmer(QPCT ~ Grammaticality*SubjectNumber + (Grammaticality*SubjectNumber|Subj),
data = subset(Experiment1, Region==1)))
?glmer
lmer(QPCT ~ Grammaticality*SubjectNumber + (Grammaticality*SubjectNumber|Subj),
data = subset(Experiment1, Region==1), family=logit)
glmer(QPCT ~ Grammaticality*SubjectNumber + (Grammaticality*SubjectNumber|Subj),
data = subset(Experiment1, Region==1), family=binomial)
glmer(QPCT ~ Grammaticality*SubjectNumber + (Grammaticality+SubjectNumber|Subj),
data = subset(Experiment1, Region==1), family=binomial)
glmer(QPCT ~ Grammaticality*SubjectNumber + (Grammaticality|Subj),
data = subset(Experiment1, Region==1), family=binomial)
glmer(QPCT ~ Grammaticality*SubjectNumber + (1|Subj),
data = subset(Experiment1, Region==1), family=binomial)
glmer(QPCT ~ Grammaticality*SubjectNumber + (1|Subj) + (1|Item),
data = subset(Experiment1, Region==1), family=binomial)
glmer(QPCT ~ Grammaticality*SubjectNumber + (1|Subj),
data = subset(Experiment1, Region==1), family=binomial) %>% summary
contrasts(Experiment1$Grammaticality)
glmer(QPCT ~ Grammaticality*SubjectNumber + (1|Subj) + (1|Item),
data = subset(Experiment1, Region==1), family=binomial) %>% summary
exp1_acc.fm0 <- glmer(QPCT ~ Grammaticality*SubjectNumber + (1|Subj) + (1|Item),
data = subset(Experiment1, Region==1), family=binomial)
kable(summary(exp1_acc.fm0))
fixef(exp1_acc.fm0)
summary(exp1_acc.fm0)
mtab
mtabs
?mtab
??mtab
relabelExperiment1 <- function(df){
df$SubjectNumber <- df$Condition
levels(df$SubjectNumber) <- c(rep("sg", 2),
rep("pl", 2))
contrasts(df$SubjectNumber) <- -contr.sum(2)/2
df$Grammaticality <- df$Condition
levels(df$Grammaticality) <- c("gr", "un", "un", "gr")
contrasts(df$Grammaticality) <- -contr.sum(2)/2
df$QPCT <- df$QPCT/100
return(df)
}
relabelExperiment1 <- function(df){
df$SubjectNumber <- df$Condition
levels(df$SubjectNumber) <- c(rep("sg", 2),
rep("pl", 2))
contrasts(df$SubjectNumber) <- -contr.sum(2)/2
df$Grammaticality <- df$Condition
levels(df$Grammaticality) <- c("gr", "un", "un", "gr")
contrasts(df$Grammaticality) <- -contr.sum(2)/2
df$QPCT <- df$QPCT/100
return(df)
}
relabelExperiment1(Experiment1) -> Experiment1
Experiment1 %$%
shaveHalfPercentile(verbose=TRUE) %>%
excludeIncorrectTrials -> exp1.target
relabelExperiment1(Experiment1) -> Experiment1
relabelExperiment1
relabelExperiment1 <- function(df){
df$SubjectNumber <- df$Condition
levels(df$SubjectNumber) <- c(rep("sg", 2),
rep("pl", 2))
contrasts(df$SubjectNumber) <- -contr.sum(2)/2
df$Grammaticality <- df$Condition
levels(df$Grammaticality) <- c("gr", "un", "un", "gr")
contrasts(df$Grammaticality) <- -contr.sum(2)/2
df$QPCT <- df$QPCT/100
return(df)
}
relabelExperiment1(Experiment1) -> Experiment1
Experiment1 %$%
shaveHalfPercentile(verbose=TRUE) %>%
excludeIncorrectTrials -> exp1.target
region.means.table
exp1.target %$%
tapply(RT, list(Grammaticality, Region, SubjectNumber), mean) ->
region_means.table
# Use participant-wise standard errors
exp1.target %$%
tapply(RT, list(Grammaticality, Region, SubjectNumber, Subj), mean) -> regionxsubj_means.table
apply(regionxsubj_means.table, c(1,2,3), stderr) -> region_se.table
region_means.table
region_means.table[,1:14,'sg']
region_means.table[,1:14,'sg']
region_means.table[,range.x,'sg']
kable(region_means.table[,range.x,'sg'],
caption="Singular subjects; (ms)")
kable(region_means.table[,range.x,'pl'],
caption="Plural subjects; (ms)")
exp1.target %$%
tapply(RT, list(Grammaticality, Region, SubjectNumber), mean) ->
region_means.table
# Use participant-wise standard errors
exp1.target %$%
tapply(RT, list(Grammaticality, Region, SubjectNumber, Subj), mean) -> regionxsubj_means.table
apply(regionxsubj_means.table, c(1,2,3), stderr) -> region_se.table
range.x <- 1:14
kable(region_means.table[,range.x,'sg'],
caption="Singular subjects; (ms)")
kable(region_means.table[,range.x,'pl'],
caption="Plural subjects; (ms)")
Experiment1 %$%
tapply(QPCT, list(Grammaticality, SubjectNumber), mean) ->
exp1_accuracy.table
Experiment1 %$%
tapply(QPCT, list(Grammaticality, SubjectNumber), mean) ->
exp1_accuracy.table
kable(100*exp1_accuracy.table, caption="Experiment 1 Accuracy by Condition", format="html")
# Load all data
load("WagersLauPhillips.rawdata.Rdata")
# Libraries
library(magrittr)
library(lme4)
library(gplots)
library(knitr)
# Analysis wide options and helper functions
options(digits=3)
stderr <- function(x){ sd(x, na.rm=TRUE) / sqrt(length(x[!is.na(x)])) }
shaveHalfPercentile <- function(df, verbose=FALSE){
RT_bounds <- quantile(df$RT, c(0.005, 0.995))
shaved <- subset(df, RT >= RT_bounds[1] & RT < RT_bounds[2])
range(df$RT) %>%
paste(collapse="-") %>%
paste("Original range (ms):", .) %>%
message
range(shaved$RT) %>%
paste(collapse="-") %>%
paste("Shaved range (ms):", .) %>%
message
return(shaved)
}
excludeIncorrectTrials <- function(df){
correct_only <- subset(df, QPCT==100)
return(correct_only)
}
unstressModel <- function(fm){
resid(fm) %>%
scale %>%
abs -> scaled_residuals
keep.these.obs <- which(scaled_residuals < 3)
stressors <- which(scaled_residuals >=3)
return(list(keep.these.obs, stressors))
}
pairPlot <- function(means.table, se.table, range.x, range.y=c(-999,-999),
par.pch=20, legend.labels){
if(range.y[1]==-999){
range.y <- range(means.table)
range.y <- 50*(range.y%/%50 + c(-1,1))
}
plotCI(range.x, means.table[1, range.x],
uiw = se.table[1, range.x], gap=0, ylim=range.y,
type='b', pch=par.pch, pt.bg="black", cex=1.5,
bty='n', ylab="RT (ms)", xlab="Region")
#  grid()
plotCI(range.x, means.table[2, range.x], add=1,
uiw = se.table[2, range.x], gap=0,
type='b', pch=par.pch, pt.bg="white", cex=1.5)
if(!is.null(legend.labels)){
legend(x="topright", legend = legend.labels, fill=c("black","white"), bty='n')
}
}
??magrittr
range.x <- 1:14
kable(region_means.table[,range.x,'sg'],
caption="Singular subjects; (ms)")
kable(region_means.table[,range.x,'pl'],
caption="Plural subjects; (ms)")
# Load all data
load("WagersLauPhillips.rawdata.Rdata")
# Libraries
library(magrittr)
library(lme4)
library(gplots)
library(knitr)
# Analysis wide options and helper functions
options(digits=3)
stderr <- function(x){ sd(x, na.rm=TRUE) / sqrt(length(x[!is.na(x)])) }
shaveHalfPercentile <- function(df, verbose=FALSE){
RT_bounds <- quantile(df$RT, c(0.005, 0.995))
shaved <- subset(df, RT >= RT_bounds[1] & RT < RT_bounds[2])
range(df$RT) %>%
paste(collapse="-") %>%
paste("Original range (ms):", .) %>%
message
range(shaved$RT) %>%
paste(collapse="-") %>%
paste("Shaved range (ms):", .) %>%
message
return(shaved)
}
excludeIncorrectTrials <- function(df){
correct_only <- subset(df, QPCT==100)
return(correct_only)
}
unstressModel <- function(fm){
resid(fm) %>%
scale %>%
abs -> scaled_residuals
keep.these.obs <- which(scaled_residuals < 3)
stressors <- which(scaled_residuals >=3)
return(list(keep.these.obs, stressors))
}
pairPlot <- function(means.table, se.table, range.x, range.y=c(-999,-999),
par.pch=20, legend.labels){
if(range.y[1]==-999){
range.y <- range(means.table)
range.y <- 50*(range.y%/%50 + c(-1,1))
}
plotCI(range.x, means.table[1, range.x],
uiw = se.table[1, range.x], gap=0, ylim=range.y,
type='b', pch=par.pch, pt.bg="black", cex=1.5,
bty='n', ylab="RT (ms)", xlab="Region")
#  grid()
plotCI(range.x, means.table[2, range.x], add=1,
uiw = se.table[2, range.x], gap=0,
type='b', pch=par.pch, pt.bg="white", cex=1.5)
if(!is.null(legend.labels)){
legend(x="topright", legend = legend.labels, fill=c("black","white"), bty='n')
}
}
source('~/.active-rstudio-document', echo=TRUE)
region_means.table
region_means.table %>% str
exp1.target %$%
tapply(RT, list(Grammaticality, Region, SubjectNumber), mean) ->
region_means.table
region_means.table
summary(exp1.target)
summary(Experiment1
)
shaveHalfPercentile(Experiment1, verbose=TRUE) %>%
excludeIncorrectTrials -> exp1.target
summary(exp1.target)
shaveHalfPercentile
shaveHalfPercentile(Experiment1, verbose=TRUE)
shaveHalfPercentile(Experiment1, verbose=TRUE)
shaveHalfPercentile(Experiment1, verbose=TRUE) %>% excludeIncorrectTrials()
shaveHalfPercentile(Experiment1, verbose=TRUE) %>% excludeIncorrectTrials
source('~/.active-rstudio-document', echo=TRUE)
relabelExperiment1(Experiment1) -> Experiment1
relabelExperiment1(Experiment1) -> Experiment1
shaveHalfPercentile(Experiment1, verbose=TRUE) %>%
excludeIncorrectTrials
Experiment1$QPCT
par(mfrow=c(2,1), mar=c(4,4,3,0))
pairPlot(region_means.table[,,'sg'], region_se.table[,,'sg'],
range.x = 1:14, range.y = c(250,600), par.pch = 21,
legend.labels = c("grammatical", "ungrammatical"))
title(main="Singular subjects")
pairPlot(region_means.table[,,'pl'], region_se.table[,,'pl'],
range.x = 1:14, range.y = c(250,600), par.pch = 22,
legend.labels = NULL)
title(main="Plural subjects")
message("Plotted standard errors calculated over per-participant means")
pairPlot(region_means.table['grammatical',,], region_se.table['grammatical',,],
range.x = 1:14, range.y = c(250,600), par.pch = 23,
legend.labels = c("singular", "plural"))
title(main="Singular subjects")
pairPlot(region_means.table['ungrammatical',,], region_se.table['ungrammatical',,],
range.x = 1:14, range.y = c(250,600), par.pch = 24,
legend.labels = NULL)
title(main="Plural subjects")
Experiment1$QPCTregion_means.table[,,'sg'
region_means.table[,,'sg'
region_means.table[,,'sg'
]
region_means.table['gr',,]
pairPlot(region_means.table['gr',,], region_se.table['gr',,],
range.x = 1:14, range.y = c(250,600), par.pch = 23,
legend.labels = c("singular", "plural"))
title(main="Grammatical agreement")
pairPlot(region_means.table['un',,], region_se.table['un',,],
range.x = 1:14, range.y = c(250,600), par.pch = 24,
legend.labels = NULL)
title(main="Ungrammatical agreement")
pairPlot(t(region_means.table['gr',,]), region_se.table['gr',,],
range.x = 1:14, range.y = c(250,600), par.pch = 23,
legend.labels = c("singular", "plural"))
title(main="Grammatical agreement")
pairPlot(t(region_means.table['un',,]), region_se.table['un',,],
range.x = 1:14, range.y = c(250,600), par.pch = 24,
legend.labels = NULL)
title(main="Ungrammatical agreement")
pairPlot(t(region_means.table['gr',,]), t(region_se.table['gr',,]),
range.x = 1:14, range.y = c(250,600), par.pch = 23,
legend.labels = c("singular", "plural"))
title(main="Grammatical agreement")
pairPlot(t(region_means.table['un',,]), t(region_se.table['un',,]),
range.x = 1:14, range.y = c(250,600), par.pch = 24,
legend.labels = NULL)
title(main="Ungrammatical agreement")
ls
ls()
ls -al
View(Experiment1)
View(Experiment2)
View(Experiment3)
View(Experiment4)
View(Experiment5)
View(Experiment6)
table(Experiment6$Subj)
with(Experiment6, tapply(RT, list(Region, mean)))
with(Experiment6, tapply(RT, list(Region), mean))
with(Experiment6, tapply(RT, list(Region,Condition), mean))
with(Experiment6, tapply(RT, list(Region,Condition), mean)) %>% plot
with(Experiment6, tapply(RT, list(Region,Condition), mean)) -> foo
lmer(RT ~ Condition + (Condition|Subj) + (Condition|Item), data=subset(Experiment6, Region==8))
library(lme4)
lmer(RT ~ Condition + (Condition|Subj) + (Condition|Item), data=subset(Experiment6, Region==8))
lmer(RT ~ Condition + (Condition|Subj) + (Condition|Item), data=subset(Experiment6, Region==8)) %>% summary()
lmer(RT ~ Condition + (Condition|Subj) + (Condition|Item), data=subset(Experiment6, Region==8)) ->foo
foo2. <- update(foo, data=doi[unstressModel])
unstressModel <- function(fm){
resid(fm) %>%
scale %>%
abs -> scaled_residuals
keep.these.obs <- which(scaled_residuals < 3)
stressors <- which(scaled_residuals >=3)
return(list(keep.these.obs, stressors))
}
foo2. <- update(foo, data=doi[unstressModel(foo)[[1]], ])
foo2 <- update(foo, data=doi[unstressModel(foo)[[1]], ])
doi <- subset(Experiment6, Region==8)
foo2 <- update(foo, data=doi[unstressModel(foo)[[1]], ])
summary(foo2)
lmer(log(RT) ~ Condition + (Condition|Subj) + (Condition|Item), data=subset(Experiment6, Region==8)) ->foo
summary(foo)
lmer(I(1/RT) ~ Condition + (Condition|Subj) + (Condition|Item), data=subset(Experiment6, Region==8)) ->foo
table(Experiment6$RT<1)
table(Experiment6$RT==0)
shaveHalfPercentile <- function(df, verbose=FALSE){
RT_bounds <- quantile(df$RT, c(0.005, 0.995))
shaved <- subset(df, RT >= RT_bounds[1] & RT < RT_bounds[2])
range(df$RT) %>%
paste(collapse="-") %>%
paste("Original range (ms):", .) %>%
message
range(shaved$RT) %>%
paste(collapse="-") %>%
paste("Shaved range (ms):", .) %>%
message
return(shaved)
}
shaveHalfPercentile(Experiment6)
shaveHalfPercentile(Experiment6) -> Experiment6.shv
lmer(RT ~ Condition + (Condition|Subj) + (Condition|Item), data=subset(Experiment6.shv, Region==8)) ->foo
summary(foo)
foo2 <- update(foo, data=doi[unstressModel(foo)[[1]], ])
summary(foo2)
lmer(log(RT) ~ Condition + (Condition|Subj) + (Condition|Item), data=subset(Experiment6.shv, Region==8)) ->foo
summary(foo)
unstressModel(foo)
